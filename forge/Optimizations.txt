=== FORGE ===
=== OPTIMIZATIONS ===

Consider these optimizations:
	- Let MoveGenerator output vector<unique_ptr<Node>> instead of 
		vector<MovePositionPair>.
		Reason: When expanding Nodes, we are having to copy Positions from the MoveList 
		to the Node itself. Using a pointer will allow for fast move operations instead of copies.

	- MoveGenerator basic move generator is slow and can be implemented more efficiently.
		Implement quiescence move generator instead.

	- MoveGenerate:
		MoveList reserves 35 elements. Maybe increase this to 60+ to prevent reallocating 
		the vector on push_backs

	- MoveGenerator (cache):
		Consider making cache of legal moves that way if legal moves for the same Board
		(not Position) is needed, it can be found in cache.
		Maybe to increase number of lists storable, we can save legal moves as just as
		a single Position and a vector<Move>

	- MoveList:
		pushIfLegal*() methods are very short and simple and will be called very often.
		consider making them inline

		When using Quinesential move generator, we don't want to call pushIfLegal*() methods
		anymore because the Quinesential move generator will only generate legal move anyway.

	- GameState:
		For draw by repetition, place count variables in each Node that say how many times 
		a position has been reached in its history.
		Might not improve performance because it means we have 1 more variable to copy
		when copying Positions.

		Looking for insufficient material only needs to be performed after a capture or 
		promotion has been made. If no capture or promotion has been made, then condition for
		insufficient material hasen't changed.

	- Tree Search Algorithms:
		When searching endgames that are very drauwus (likely to lead to a draw), consider
		terminating search early with an evaluation of 0 (meaning draw). Because searching
		a drauss endgame can take even more time to search as a win or loss because of chains
		of passive moves. 
		How do you know if a game is leading to a draw?

		Multi-threading of search algorithms. Use dynamic tree splitting. See Multi_threading.txt

		Use CPU and GPUs for evaluating NNs instead of GPUs only.

	- GameHistory (or even Node tree):
		For evaluating draw by repetition, each position in GameHistory is compared to 
		some current position for equality. This equality consists of comparing
		two Boards and current player. See if theres a more efficient way of comparing
		the equality of Boards based on the changes.
			Maybe see what move lead to a specified Board and start by comparing the squares
			of the piece that moved. Starting with comparing those squares will show that two
			Boards are not equal because, the piece that moved is more likely to be different 
			that say the top rank.