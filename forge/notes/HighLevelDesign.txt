=== Forge: Chess Engine ===

Link that explains LC0's design:
	http://lczero.org/dev/wiki/technical-explanation-of-leela-chess-zero/

====================== MVC ====================================================

Model:
	Board
		- 8x8 array (hopefully good for DNN)	Nope
		- BitBoard								Yes. Allows for more efficient bitwise operations
		- Each element stores a Piece
		- hash function to be used with chess databases.
	Pieces
		- 0=empty, 1=whitepawn, -1=blackpawn, 2=whiteknight, ...
	Legal Move Generator
		- legal move generator
		- threat generator

	Game State Checks (White wins, Black Wins, Draw, Tecnical Draw, Still Playing, ...)
	
	TimeControl
		- timer 
			- Needs to signal GUIs each second
			- Incorporate into CL Display also (Use back space to update time)
			
	Move Numbers:
		- keeps track of move number (could be important for solver in deciding how much time to use)
		- maybe make it a part of TimeControl

	AI Agent:
		solvers:
			- minimax or negamax
			- mcts
			- random (used for testing)

		evaluation functions:
			- traditional
			- dnn
			- nnue (Very good optimization) (Look into this later, after we get a NN working properly)
			- random (used for testing)

View:
	*See View.txt

Controller:
	UCI controller - for input from a UCI GUI. *See UCI.txt
	Keyboard Controller - for input from a command line 
		Should support both PGN and Long Algebreic Notation.
	Database Controller - 
	AI Controller - 
		- RandomSolver
		- MinimaxSolver
		- MinimaxSolverMT
		- MCTSSolver
		- MCTSSolverMT
	Network Controller -

===============================================================================

Program Options:
	*See program_options.txt

Elo Ratings:
	Mostly to calculate its elo when versing itself.

Chess Notations:
	- PGN
	- Long Algebreic Notation 
		ex: e2e4, e7e5, e1g1 (white short castling), e7e8q (for promotion)
	- FEN

Machine Learning:
	For traditional evaluation:
		- Genetic Algorithm
		- preferably unsupervised learning
		- possibly try supervised learning if we want and can find chess data.
		- Backpropagation - 
			Use Keras and Python using training data generated by our engine or data from other sources

	For DNN:
		- OpenCV for engine (C++)
		- Keras for training (Python)

Multithreading:
	For traditional evaluation
		- should work great
	For DNN:
		- GPU might be the bottleneck and limit effectiveness of larger numbers of threads.
			- Consider using Raptor for intense multithreading because it can support 2 video cards.
				Having 2 video cards may reduce the GPU bottleneck if it even exists. 

Opening Table Database:
	Find some chess datasets

GameLogger:
	- See Classes.txt
